"use strict";(self.webpackChunku_modeler_manual=self.webpackChunku_modeler_manual||[]).push([[93],{3905:(e,t,o)=>{o.d(t,{Zo:()=>d,kt:()=>g});var r=o(7294);function n(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function l(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,r)}return o}function i(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?l(Object(o),!0).forEach((function(t){n(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):l(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function a(e,t){if(null==e)return{};var o,r,n=function(e,t){if(null==e)return{};var o,r,n={},l=Object.keys(e);for(r=0;r<l.length;r++)o=l[r],t.indexOf(o)>=0||(n[o]=e[o]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)o=l[r],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(n[o]=e[o])}return n}var s=r.createContext({}),c=function(e){var t=r.useContext(s),o=t;return e&&(o="function"==typeof e?e(t):i(i({},t),e)),o},d=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var o=e.components,n=e.mdxType,l=e.originalType,s=e.parentName,d=a(e,["components","mdxType","originalType","parentName"]),p=c(o),u=n,g=p["".concat(s,".").concat(u)]||p[u]||m[u]||l;return o?r.createElement(g,i(i({ref:t},d),{},{components:o})):r.createElement(g,i({ref:t},d))}));function g(e,t){var o=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=o.length,i=new Array(l);i[0]=u;var a={};for(var s in t)hasOwnProperty.call(t,s)&&(a[s]=t[s]);a.originalType=e,a[p]="string"==typeof e?e:n,i[1]=a;for(var c=2;c<l;c++)i[c]=o[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,o)}u.displayName="MDXCreateElement"},3686:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>l,metadata:()=>a,toc:()=>c});var r=o(7462),n=(o(7294),o(3905));const l={slug:"/modeling/weld-tool",sidebar_position:6},i="Weld Tool",a={unversionedId:"editable-mesh/modeling-mode/modeling-mode-remove/weld-tool",id:"editable-mesh/modeling-mode/modeling-mode-remove/weld-tool",title:"Weld Tool",description:"The Weld tool is a tool that joins selected vertices that are within a distance of a value set in the properties.",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/editable-mesh/modeling-mode/modeling-mode-remove/weld-tool.md",sourceDirName:"editable-mesh/modeling-mode/modeling-mode-remove",slug:"/modeling/weld-tool",permalink:"/docs/modeling/weld-tool",draft:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{slug:"/modeling/weld-tool",sidebar_position:6},sidebar:"docs",previous:{title:"Merge Tool",permalink:"/docs/modeling/merge-tool"},next:{title:"Combine Face Tool",permalink:"/docs/modeling/combineface-tool"}},s={},c=[{value:"<strong>How to use</strong>",id:"how-to-use",level:2},{value:"<strong>Properties</strong>",id:"properties",level:2},{value:"Distance",id:"distance",level:3},{value:"<strong>Examples</strong>",id:"examples",level:2},{value:"Distance",id:"distance-1",level:3}],d={toc:c};function p(e){let{components:t,...o}=e;return(0,n.kt)("wrapper",(0,r.Z)({},d,o,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"weld-tool"},"Weld Tool"),(0,n.kt)("p",null,"The ",(0,n.kt)("strong",{parentName:"p"},"Weld tool")," is a tool that joins ",(0,n.kt)("strong",{parentName:"p"},"selected vertices")," that are within a distance of a value set in the properties."),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"how-to-use"},(0,n.kt)("strong",{parentName:"h2"},"How to use")),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Select ",(0,n.kt)("strong",{parentName:"li"},"2 or more vertices"),".")),(0,n.kt)("ol",{start:2},(0,n.kt)("li",{parentName:"ol"},"Run the Weld tool.")),(0,n.kt)("ol",{start:3},(0,n.kt)("li",{parentName:"ol"},"Enter the desired distance in the Distance property.")),(0,n.kt)("ol",{start:4},(0,n.kt)("li",{parentName:"ol"},"Vertices whose distance between them is less than or equal to the value entered in the Distance property will be joined.")),(0,n.kt)("ol",{start:5},(0,n.kt)("li",{parentName:"ol"},"Select the element, or use another tool to finalize.")),(0,n.kt)("h2",{id:"properties"},(0,n.kt)("strong",{parentName:"h2"},"Properties")),(0,n.kt)("h3",{id:"distance"},"Distance"),(0,n.kt)("p",null,"This property allows you to set the distance between vertices to be merged."),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"examples"},(0,n.kt)("strong",{parentName:"h2"},"Examples")),(0,n.kt)("h3",{id:"distance-1"},"Distance"))}p.isMDXComponent=!0}}]);